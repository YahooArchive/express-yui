{
    "project": {
        "name": "express-yui API documentation",
        "description": "express-yui API documentation",
        "version": "0.2.0",
        "url": "https://github.com/yahoo/express-yui"
    },
    "files": {
        "lib/patches/lang-bundles-requires.js": {
            "name": "lib/patches/lang-bundles-requires.js",
            "modules": {
                "express-yui/lib/patches/lang-bundles-requires": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/patches/optional-requires.js": {
            "name": "lib/patches/optional-requires.js",
            "modules": {
                "express-yui/lib/patches/optional-requires": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/patches/server-intl-get.js": {
            "name": "lib/patches/server-intl-get.js",
            "modules": {
                "express-yui/lib/patches/server-intl-get": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/patches/templates-requires.js": {
            "name": "lib/patches/templates-requires.js",
            "modules": {
                "express-yui/lib/patches/templates-requires": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/client.js": {
            "name": "lib/client.js",
            "modules": {
                "express-yui/lib/client": 1
            },
            "classes": {
                "client": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/index.js": {
            "name": "lib/index.js",
            "modules": {
                "express-yui": 1
            },
            "classes": {
                "ExpressYUI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/loader-patch.js": {
            "name": "lib/loader-patch.js",
            "modules": {
                "express-yui/lib/loader-patches": 1
            },
            "classes": {
                "loader-patch": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/middleware.js": {
            "name": "lib/middleware.js",
            "modules": {
                "express-yui/lib/middleware": 1
            },
            "classes": {
                "middleware": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/origin.js": {
            "name": "lib/origin.js",
            "modules": {
                "express-yui/lib/origin": 1
            },
            "classes": {
                "origin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/seed.js": {
            "name": "lib/seed.js",
            "modules": {
                "express-yui/lib/seed": 1
            },
            "classes": {
                "seed": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/server.js": {
            "name": "lib/server.js",
            "modules": {
                "express-yui/lib/server": 1
            },
            "classes": {
                "server": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/utils.js": {
            "name": "lib/utils.js",
            "modules": {
                "express-yui/lib/utils": 1
            },
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/yui.js": {
            "name": "lib/yui.js",
            "modules": {
                "express-yui/lib/yui": 1
            },
            "classes": {
                "yui": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "express-yui/lib/patches/lang-bundles-requires": {
            "name": "express-yui/lib/patches/lang-bundles-requires",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/patches/lang-bundles-requires.js",
            "line": 9,
            "description": "Patches `Y.Loader` to support `langBundles`, which enables you to\nrequire language bundles easily while define modules.\n\nYou can write your modules like this:\n\n    YUI.add('name', function (Y) {\n        // module code...\n    }, '0.1', { requires: [], langBundles: ['foo', 'bar'] });\n\nAnd you can enable the patch like this:\n\n    app.yui.patch(require('express-yui/lib/patches/lang-bundles-requires'));\n\nThis will guarantee, that the language bundles denotated by file `lang/foo` and\n`lang/bar` will be loaded. Of course, they will be loaded based on the transpiler\noutput, which generates a more complex module name. If you don't use this patch, you will\nhave to use the full name of the generated modules to require them manually in\nthe `requires` list."
        },
        "express-yui/lib/patches/optional-requires": {
            "name": "express-yui/lib/patches/optional-requires",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/patches/optional-requires.js",
            "line": 9,
            "description": "Patches `Y.Loader` to support `optionalRequires`, which enables you to\nrequire modules that might not be available in a runtime, and avoid to\nthrow when that happens.\n\n!IMPORTANT/TODO: this patch can be removed once we get [PR1629][] merged\ninto YUI.\n[PR1629]: https://github.com/yui/yui3/pull/1629\n\nIt also add support for modules that are essencially polyfills,\nthis means that some modules can only be used if the test is passed first\notherwise they should be ignored.\n\nThis helps when it comes to define modules that are only available on\nthe server or client, or polyfills, while other modules that are common can require\nthem as optionals.\n\n    app.yui.patch(require('express-yui/lib/patches/optional-requires'));\n\nWhen this patch is applied, you can add a new entry called `test` in the\nmetas for a module, this entry is a functions. If the test fails, the module\nwill be automatically discarded.\n\nNote that the `optional` implementation in YUI does not cover this case,\nand it only covers the case where the module was required or not by another\nmodule in the `use` statement, which is not quite the same."
        },
        "express-yui/lib/patches/server-intl-get": {
            "name": "express-yui/lib/patches/server-intl-get",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/patches/server-intl-get.js",
            "line": 9,
            "description": "Patches `Y.Intl.get` to use the language bundles produced by\n`locator-lang` plugin, and will be available thru locator's bundle\nobjects on the server side. You can apply this patch like this:\n\n    app.yui.patchServer(require('express-yui/lib/patches/server-intl-get'));\n\nThen you can use this in your program:\n\n    Y.Intl.get('<bundleName>/foo');\n\nThis will resolve `foo` as a language bundle from the bundle specified by name,\nwhich is normally a file in `lang/foo.json` or `lang/foo.yrb`\nthat was transpiled into a module by `locator-lang`."
        },
        "express-yui/lib/patches/templates-requires": {
            "name": "express-yui/lib/patches/templates-requires",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/patches/templates-requires.js",
            "line": 9,
            "description": "Patches `Y.Loader` to support `templates` requirements, which enables you to\nrequire templates easily without having to know the name of the module\ngenerated by the build transpiler/plugin/task while define modules.\n\nYou can write your modules like this:\n\n    YUI.add('name', function (Y) {\n        // module code...\n    }, '0.1', { requires: [], templates: ['foo'] });\n\nAnd you can enable the patch like this:\n\n    app.yui.patch(require('express-yui/lib/patches/templates-requires'));\n\nThis will guarantee, that the template denotated by the logical name `foo`\nwill be loaded. Of course, it will be loaded based on the transpiler\noutput, which generates a more complex module name. If you don't use this patch, you will\nhave to use the full name of the generated module."
        },
        "express-yui/lib/client": {
            "name": "express-yui/lib/client",
            "submodules": {},
            "classes": {
                "client": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/client.js",
            "line": 20,
            "description": "Provides a set of features\nto control a YUI instance on the client side. This module will be\nserialized and sent to the client side thru `res.expose()` and available\nin the client side thru `window.app.yui`."
        },
        "express-yui": {
            "name": "express-yui",
            "submodules": {},
            "classes": {
                "ExpressYUI": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/index.js",
            "line": 35,
            "description": "The `express-yui` module implements an express extension to provide\nyui capabilities to express applications."
        },
        "express-yui/lib/loader-patches": {
            "name": "express-yui/lib/loader-patches",
            "submodules": {},
            "classes": {
                "loader-patch": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/loader-patch.js",
            "line": 16,
            "description": "Provides hooks to patch the YUI loader on both the server and/or client."
        },
        "express-yui/lib/middleware": {
            "name": "express-yui/lib/middleware",
            "submodules": {},
            "classes": {
                "middleware": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/middleware.js",
            "line": 22,
            "description": "Provides some basic features to expose yui configurations information through `app.expose()`\nthat could be used to boot `YUI` in the client runtime. It also provide some sugar to\nexpose static assests that are YUI related."
        },
        "express-yui/lib/origin": {
            "name": "express-yui/lib/origin",
            "submodules": {},
            "classes": {
                "origin": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/origin.js",
            "line": 22,
            "description": "Provides a set of features to mutate the express app into an origin server for yui\nmodules and static assets."
        },
        "express-yui/lib/seed": {
            "name": "express-yui/lib/seed",
            "submodules": {},
            "classes": {
                "seed": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/seed.js",
            "line": 20,
            "description": "Provides a set of features to construct the yui seed structure which contains the url\nto fetch the initial piece of the library from the client runtime."
        },
        "express-yui/lib/server": {
            "name": "express-yui/lib/server",
            "submodules": {},
            "classes": {
                "server": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/server.js",
            "line": 22,
            "description": "The `express-yui/lib/server` provides a set of features\nto control a YUI instance on the server side."
        },
        "express-yui/lib/utils": {
            "name": "express-yui/lib/utils",
            "submodules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/utils.js",
            "line": 20,
            "description": "Utility functions used across `express-yui` components."
        },
        "express-yui/lib/yui": {
            "name": "express-yui/lib/yui",
            "submodules": {},
            "classes": {
                "yui": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/yui.js",
            "line": 28,
            "description": "Provides the class foundation of the `app.yui` object."
        }
    },
    "classes": {
        "client": {
            "name": "client",
            "shortname": "client",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "express-yui/lib/yui",
                "middleware"
            ],
            "module": "express-yui/lib/client",
            "namespace": "",
            "file": "lib/client.js",
            "line": 20,
            "description": "Provides a set of methods to be serialized and sent to the client side to boot\nthe application in the browser.",
            "static": 1,
            "uses": [
                "utils"
            ]
        },
        "ExpressYUI": {
            "name": "ExpressYUI",
            "shortname": "ExpressYUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "express-yui",
            "namespace": "",
            "file": "lib/index.js",
            "line": 35,
            "description": "The `express-yui` extension provides the foundation and some basic\nfeatures to boot `YUI` in the client and server runtimes.\n\nThe following is an example of how to extend an express application:\n\n    var express = require('express'),\n        expyui = require('express-yui'),\n        app = express();\n\n    expyui.extend(app);\n\n    // setting some basic configurations for YUI\n    app.yui.applyConfig({\n        fetchCSS: false\n    });\n\n    // calling expose middleware when a route match.\n    app.get('/index.html', expyui.expose(), anotherRoute);\n\nIn the example above, the `state` of the app will be serialized\nper request, and can be used in the template to set up the client\nside to run YUI with the same configuration used on the server side.\nHere is an example of a handlebars template:\n\n    <script>\n    {{{state}}}\n    app.yui.use('node', function (Y) {\n        Y.one('#content').setContent('<p>Ready!</p>');\n    });\n    </script>\n\nIn this particular case, `state` will hold all the\nappropiated settings generated by `expose` middleware.",
            "static": 1,
            "uses": [
                "middleware"
            ]
        },
        "loader-patch": {
            "name": "loader-patch",
            "shortname": "loader-patch",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "express-yui/lib/yui"
            ],
            "module": "express-yui/lib/loader-patches",
            "namespace": "",
            "file": "lib/loader-patch.js",
            "line": 16,
            "description": "Provides hooks to patch the YUI loader on both the server and/or client.\nIt will facilitate try new things and patches without requiring to wait\nfor YUI to be released. Here is an example:\n\n    app.yui.patch(require('express-yui/lib/patches/optional-requires'));\n\nIn the example above, one of the default patches shipped with with\n`express-yui`, is executed on the server and client to patch the\nYUI Loader to support a new type of metadata called `optionalRequires`,\nwhich provides an easy way to define requirements for a module that are\nnot avialable in all runtimes.",
            "static": 1
        },
        "middleware": {
            "name": "middleware",
            "shortname": "middleware",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "express-yui",
                "ExpressYUI"
            ],
            "module": "express-yui/lib/middleware",
            "namespace": "",
            "file": "lib/middleware.js",
            "line": 22,
            "description": "Exports few middleware.",
            "static": 1,
            "uses": [
                "client",
                "utils",
                "*debug",
                "*express",
                "*yui"
            ]
        },
        "origin": {
            "name": "origin",
            "shortname": "origin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "express-yui/lib/yui",
                "yui"
            ],
            "module": "express-yui/lib/origin",
            "namespace": "",
            "file": "lib/origin.js",
            "line": 22,
            "description": "Facilitates the configuration of YUI Core modules and other\ngroups to be served from the express app in a form of origin server.\n\n    var express = require('express'),\n        expyui = require('express-yui'),\n        app = express();\n\n    expyui.extend(app);\n    // registering a group called `app` based on a folder generated by `shifter` or any similar tool.\n    app.yui.registerGroup('app', '/path/to/build/groupName', 'loader-app');\n\n    app.use(expyui.expose());\n    app.use(expyui.static('/path/to/build'));\n\nIn the example above, the group/bundle should be built into the `/path/to/build` prior\nto registering the new group. This process is normaly carry on by the `locator` instance,\nor using `shifter` directly. But once `express-yui` receive the information about the\nnew group, it will automatically provision that new group into the client side by\nusing the `loader-<groupName>` module as the meta module.",
            "static": 1,
            "uses": [
                "utils",
                "*path"
            ]
        },
        "seed": {
            "name": "seed",
            "shortname": "seed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "express-yui/lib/yui",
                "yui"
            ],
            "module": "express-yui/lib/seed",
            "namespace": "",
            "file": "lib/seed.js",
            "line": 20,
            "description": "Provision the seed information into `app.yui.expose()`, and it\nexposes an array of object with the information to build\nthe script tag or tags that forms the seed:\n\nThe following is an example of how these features can be used:\n\n    var express = require('express'),\n        expyui = require('express-yui'),\n        app = express();\n\n    expyui.extend(app);\n    // adjust the seed modules\n    app.yui.seed(['yui-base', 'loader', 'foo', 'bar']);\n    // Call expose middleware when a route match.\n    app.get('/index.html', expyui.expose(), anotherRoute);\n\nIn the example above, the array of objects with all seed urls\nwill be exposed thru `window.YUI_config.seed`, which means you\ncan use it in in the client side to prepare the page to host a\nyui instance. Normally, you don't have to do this manually, you\ncan use `app.yui.ready()` or `app.yui.use()` methods to do that\ntask automatically. Here is an example of what you need in your\nlayout template:\n\n    <script>\n    {{{state}}}\n    app.yui.ready(function () {\n        // at this point, YUI is ready in the client, plus\n        `loader`, `foo` and `bar` modules injected in the page\n        since they were part or the seed.\n    });\n    </script>",
            "static": 1,
            "uses": [
                "debug*"
            ]
        },
        "server": {
            "name": "server",
            "shortname": "server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "express-yui/lib/yui",
                "yui"
            ],
            "module": "express-yui/lib/server",
            "namespace": "",
            "file": "lib/server.js",
            "line": 22,
            "description": "Provides a set of features to control a YUI instance on the server side.",
            "static": 1,
            "uses": [
                "*path",
                "utils"
            ]
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "client",
                "middleware",
                "origin",
                "server",
                "yui"
            ],
            "module": "express-yui/lib/utils",
            "namespace": "",
            "file": "lib/utils.js",
            "line": 20,
            "description": "Exports few utility methods and constants for `express-yui` components.",
            "static": 1
        },
        "yui": {
            "name": "yui",
            "shortname": "yui",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "express-yui/lib/yui",
            "namespace": "",
            "file": "lib/yui.js",
            "line": 28,
            "description": "The `express-yui/lib/yui` exports the class used to create the `app.yui`\nmember that will be attached to the express app instance. This member\nprovides a set of functionalities to control the YUI version to be used\non the client as well as on the server.\n\nThe following is an example of how these features can be used:\n\n    var express = require('express'),\n        expyui = require('express-yui'),\n        app = express();\n\n    expyui.extend(app);\n\n    // Set some basic configs\n    app.yui.applyConfig({\n        fetchCSS: false\n    });\n\n    // Call expose middleware when a route match.\n    app.get('/index.html', expyui.expose(), anotherRoute);\n\nIn the example above, you can see that right after extending the\n`app` with `expyui.extend()` a new member is available under `app.yui`,\nand it enable us to configure YUI in any way we want.\nAlso, the `state` of the app will be serialized\nper request, and can be used in the template to set up the client\nside to run YUI with the same configuration used on the server side.\nHere is an example of a handlebars template:\n\n    <script>\n    {{{state}}}\n    app.yui.use('node', function (Y) {\n        Y.one('#content').setContent('<p>Ready!</p>');\n    });\n    </script>\n\nIn this particular case, `state` will hold all the\nappropiated settings generated by `expose` middleware.",
            "static": 1,
            "is_constructor": 1,
            "uses": [
                "utils",
                "seed",
                "origin",
                "server"
            ]
        }
    },
    "classitems": [
        {
            "file": "lib/client.js",
            "line": 148,
            "description": "Attaches the seed into the head, then creates a YUI Instance and attaches\n`modules` into it. This is equivalent to `YUI().use()` after getting the seed\nready. This method is a bootstrap implementation for the library, and the way\nyou use this in your templates, is by doing this:\n\n    <script>{{{state}}}</script>\n    <script>\n    app.yui.use('foo', 'bar', function (Y) {\n        // do something!\n    });\n    </script>\n\nWhere `state` defines the state of the express app, and `app.yui` defines\nthe helpers that `express-yui` brings into the client side.",
            "itemtype": "method",
            "name": "use",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "client",
            "module": "express-yui/lib/client"
        },
        {
            "file": "lib/client.js",
            "line": 172,
            "description": "Like `app.yui.use()` but instead delegates to `YUI().require()` after\ngetting the seed ready. The callback passed to `require()` receives two\narguments, the `Y` object like `use()`, but also `imports` which holds all\nof the exports from the required modules.\n\n    <script>{{{state}}}</script>\n    <script>\n    app.yui.require('foo', 'bar', function (Y, imports) {\n        var Foo         = imports['foo'],\n            namedExport = imports['bar'].baz;\n    });\n    </script>",
            "itemtype": "method",
            "name": "require",
            "access": "public",
            "tagname": "",
            "class": "client",
            "module": "express-yui/lib/client"
        },
        {
            "file": "lib/client.js",
            "line": 193,
            "description": "Boots the application, rehydrate the app state and calls back to notify the\n`ready` state of the app.\n\n    <script>{{{state}}}</script>\n    <script>\n    app.yui.ready(function (err) {\n        if (err) {\n            throw err;\n        }\n        app.yui.use('foo', 'bar', function (Y) {\n            // do something!\n        });\n    });\n    </script>",
            "itemtype": "method",
            "name": "ready",
            "params": [
                {
                    "name": "callback",
                    "description": "when the app is ready. If an error occurr, the error object\n                    will be passed as the first argument of the callback function.",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "client",
            "module": "express-yui/lib/client"
        },
        {
            "file": "lib/client.js",
            "line": 220,
            "description": "The internal bootstraping implementation.",
            "itemtype": "method",
            "name": "_bootstrap",
            "params": [
                {
                    "name": "method",
                    "description": "The method to call on `Y`, either `\"use\"` or `\"require\"`.",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Array of `arguments` to apply to the `Y` `method`.",
                    "type": "Any[]"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "client",
            "module": "express-yui/lib/client"
        },
        {
            "file": "lib/index.js",
            "line": 76,
            "description": "Extends an express application instance with `express-yui` functionalities.",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "app",
                    "description": "express app instance to be extended with the `yui` member.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "express app instance",
                "type": "Object"
            },
            "class": "ExpressYUI",
            "module": "express-yui"
        },
        {
            "file": "lib/loader-patch.js",
            "line": 35,
            "description": "Adds patches that will be applied to the YUI instance\nbefore the initial `use` statement on the client side.\n\n    app.yui.patchClient(require('express-yui/lib/patches/templates-requires'));",
            "itemtype": "method",
            "name": "patchClient",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "patch",
                    "description": "Each argument represent a patch to be applied to the client runtime",
                    "type": "Function*"
                }
            ],
            "class": "loader-patch",
            "module": "express-yui/lib/loader-patches"
        },
        {
            "file": "lib/loader-patch.js",
            "line": 52,
            "description": "Adds patches that will be applied to the YUI instance\nbefore the initial `use` statement on the server side.\n\n    app.yui.patchServer(require('express-yui/lib/patches/server-intl-get'));",
            "itemtype": "method",
            "name": "patchServer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "patch",
                    "description": "Each argument represent a patch to be applied to the server runtime",
                    "type": "Function*"
                }
            ],
            "class": "loader-patch",
            "module": "express-yui/lib/loader-patches"
        },
        {
            "file": "lib/loader-patch.js",
            "line": 67,
            "description": "Adds patches that will be applied to the YUI instance\nbefore the initial `use` statement on the server side and client.\nHere is an example of how to use this:\n\n    app.yui.patch(require('express-yui/lib/patches/optional-requires'));",
            "itemtype": "method",
            "name": "patch",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "patch",
                    "description": "Each argument represent a patch to be applied",
                    "type": "Function*"
                }
            ],
            "class": "loader-patch",
            "module": "express-yui/lib/loader-patches"
        },
        {
            "file": "lib/middleware.js",
            "line": 32,
            "description": "Exposes the yui configuration into `app.locals.state`. It also\nexposes the `express-yui` wrapper for YUI on the client so you can\naccess `app.yui.*` on the client side just like you do on the server\nside. The client wrapper includes `app.yui.ready()` and `app.yui.use()`\nwith the corresponding bootstraping code to inject YUI into the page.\nThis middleware will be invoked by `expyui.expose()` middleware\nautomatically, which means you do not need to call it directly.",
            "itemtype": "method",
            "name": "exposeConfig",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "express middleware",
                "type": "Function"
            },
            "class": "middleware",
            "module": "express-yui/lib/middleware"
        },
        {
            "file": "lib/middleware.js",
            "line": 69,
            "description": "Expose the seed information into `app.locals.state`. This seed is\nan array of urls based on the call to `app.yui.seed()`, which is\ngoing to be used by the client bootstrap code to inject YUI into\nthe page.\nThis middleware will be invoked by `expyui.expose()` middleware\nautomatically, which means you do not need to call it directly.",
            "itemtype": "method",
            "name": "exposeSeed",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "express middleware",
                "type": "Function"
            },
            "class": "middleware",
            "module": "express-yui/lib/middleware"
        },
        {
            "file": "lib/middleware.js",
            "line": 106,
            "description": "Exposes YUI into the client side. This middleware bundles\n`expyui.exposeConfig()` and `expyui.exposeSeed()` middleware.\n\n    var express = require('express'),\n        expyui = require('express-yui'),\n        app = express();\n\n    expyui.extend(app);\n\n    // using it for a mounted middleware for all requests\n    app.use(expyui.expose());\n\nIn the example above, the `state` of the app will be serialized *once*, on\nthe first request, and can be used in the template to set up the client\nside to run YUI with the same configuration used on the server side.\nHere is an example of a handlebars template:\n\n    <script>\n    {{{state}}}\n    app.yui.use('node', function (Y) {\n        Y.one('#content').setContent('<p>Ready!</p>');\n    });\n    </script>",
            "itemtype": "method",
            "name": "expose",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "express middleware",
                "type": "Function"
            },
            "class": "middleware",
            "module": "express-yui/lib/middleware"
        },
        {
            "file": "lib/middleware.js",
            "line": 161,
            "description": "Forces a request to use yui in debug mode with combine disabled. This exposes\nYUI configuration overrides per request on `res.locals.state` (which inherits\nfrom `app.locals.state`.)\n\n    // exposing yui into the client side through `state` object\n    app.use(expyui.expose());\n    // using yui in debug mode when node runs in debug mode with custom filter\n    if (app.get('env') === 'development') {\n        app.use(expyui.debug({filter: 'raw'}));\n    }\n\nMore details about the yui debug mode settings\n[in the YUI API Docs](http://yuilibrary.com/yui/docs/api/classes/config.html).",
            "itemtype": "method",
            "name": "debug",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "config",
                    "description": "optional debug settings",
                    "type": "Object",
                    "props": [
                        {
                            "name": "combine",
                            "description": "default to `false`",
                            "type": "Boolean"
                        },
                        {
                            "name": "logLevel",
                            "description": "default to `\"debug\"`",
                            "type": "String"
                        },
                        {
                            "name": "filter",
                            "description": "default to `\"debug\"`",
                            "type": "String"
                        },
                        {
                            "name": "useBrowserConsole",
                            "description": "optional debug settings",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "express middleware",
                "type": "Function"
            },
            "class": "middleware",
            "module": "express-yui/lib/middleware"
        },
        {
            "file": "lib/middleware.js",
            "line": 209,
            "description": "Serves YUI Modules as static assets. All registered groups and core will be\nserved from app origin.\n\n    app.use(expyui.static(__dirname + '/build'));\n\nThe example above behaves very similar to `express.static()` middleware, but\nit adds some sugar to also server YUI core modules as synthetic files, so you\ncan combine yui core modules with app specific modules for better performance.\nIf also adds some extra headers to avoid caching static files in a browser\nwhen nodejs is running in debug mode to facilitate development.",
            "itemtype": "method",
            "name": "static",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "buildDirectory",
                    "description": "fullpath to locator build directory",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "express static handler options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "express app that can be mounted into another express app.",
                "type": "Object"
            },
            "class": "middleware",
            "module": "express-yui/lib/middleware"
        },
        {
            "file": "lib/origin.js",
            "line": 50,
            "description": "Set YUI Core Modules from the same origin as to where the application\nis hosted.\n\nThis is not recommended for production and instead you should use a\n`cdn` to server the build folder, but it is a very useful feature for\ndevelopment. Here is an example on how to use it:\n\n    app.yui.setCoreFromAppOrigin();",
            "itemtype": "method",
            "name": "setCoreFromAppOrigin",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "loaderConfig",
                    "description": "optional loader configuration for the core",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "origin",
            "module": "express-yui/lib/origin"
        },
        {
            "file": "lib/origin.js",
            "line": 82,
            "description": "Set a custom loader configuration for the group.\n\nHere is an example of how to use it.\n\n    app.yui.applyGroupConfig('app', {\n        maxURLLength: 2048,\n        comboBase: \"/combo?\"\n        comboSep: \"&\"\n    });",
            "itemtype": "method",
            "name": "applyGroupConfig",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "groupName",
                    "description": "the name of the group used by loader.",
                    "type": "String"
                },
                {
                    "name": "loaderConfig",
                    "description": "custom loader configuration\nfor the group.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "origin",
            "module": "express-yui/lib/origin"
        },
        {
            "file": "lib/origin.js",
            "line": 115,
            "description": "Register a group by defining the group configuration for the loader.\nGroups can be served from origin app or from CDN by calling `applyGroupConfig`\nor by setting `yui default base`, `yui default root` and `yui combo config` thru\n`app.set()`.\n\nHere is an example on how to use it, assuming that the YUI metadata are\nlocated in the `build` directory under the app root.\n\n    app.yui.registerGroup('app', __dirname + '/build', 'loader-app');",
            "itemtype": "method",
            "name": "registerGroup",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "groupName",
                    "description": "the name of the group used by loader.",
                    "type": "String"
                },
                {
                    "name": "groupRoot",
                    "description": "filesystem path for the group. This will be used to\nanalyze all modules in the group.",
                    "type": "String"
                },
                {
                    "name": "metaModuleName",
                    "description": "optional module name to denotate the yui module that holds\nthe metas for the group. Default value: `loader-<groupName>`",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "origin",
            "module": "express-yui/lib/origin"
        },
        {
            "file": "lib/seed.js",
            "line": 61,
            "description": "The default mapping for suffix based on the config `filter` value for js modules.",
            "itemtype": "property",
            "name": "JS_FILTERS_MAP",
            "type": "{Object}",
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 73,
            "description": "The default mapping for suffix based on the config `filter` value for css modules.",
            "itemtype": "property",
            "name": "CSS_FILTERS_MAP",
            "type": "{Object}",
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 85,
            "description": "The default filter suffix for yui modules urls.",
            "itemtype": "property",
            "name": "DEFAULT_FILTER",
            "type": "{String}",
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 93,
            "description": "Gets the default list of module names that should\nbe part of the seed files.",
            "itemtype": "method",
            "name": "getDefaultSeed",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "list of modules in seed",
                "type": "Array"
            },
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 105,
            "description": "Adds a yui module name into the `core` YUI configuration\nwhich is used by loader to identify the pieces that are\nalready part of the seed and should be attached to Y\nautomatically.",
            "itemtype": "method",
            "name": "addModuleToSeed",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "moduleName",
                    "description": "the yui module name",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 134,
            "description": "Specify a list of modules to use as seed. This\nmethod extends the yui static configuration,\nspecifically setting the `app.yui.config().seed` value.\n\n    app.yui.seed([\"yui-base\", \"loader\"]);",
            "itemtype": "method",
            "name": "seed",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modules",
                    "description": "list of modules to use",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "express middleware",
                "type": "Function"
            },
            "chainable": 1,
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 162,
            "description": "Build the list of urls to load the seed files for the app.\n\n    var scripts = app.yui.getSeedUrls();\n\nAs a result, `scripts` will be an array with one or more urls that\nyou can use in your templates to provision YUI. Keep in mind that if\nuse `expressYUI.expose()` middleware, you don't need to provision the\nseed, it will be provisioned automatically as part of the `state` object.",
            "itemtype": "method",
            "name": "getSeedUrls",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "customConfig",
                    "description": "optional configuration to overrule filter and combine per request when\n                building the urls. This is useful if you have a custom middleware to turn debug mode\n                on, and combine off by passing some special parameter.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "optional filter to overrule any filter",
                            "type": "String"
                        },
                        {
                            "name": "combine",
                            "description": "optional flag to overrule combine,\n                     when set to `false`, it will avoid creating combo urls.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the `src` url for each script tag that forms the seed",
                "type": "Array"
            },
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 188,
            "description": "Build a list of urls to load a list of modules.\n\n    var scripts = app.yui.buildJSUrls('node', 'photos@hermes');\n\nAs a result, `scripts` will be an array with one or more urls that\nyou can use in your templates to insert script tags.\n\nModules as `photos@hermes` denotate a module from a particular group,\nas in `<module-name>@<group-name>`. Modules without the group denotation\nwill be assumed as core modules from yui.",
            "itemtype": "method",
            "name": "buildJSUrls",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modules",
                    "description": "One or more module name (and optional @<group-name>)",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "the `src` url for each script tag that forms the seed",
                "type": "Array"
            },
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 209,
            "description": "Build a list of urls to load a list of css modules.\n\n    var links = app.yui.buildCSSUrls('cssbase', 'cssflickr@hermes');\n\nAs a result, `links` will be an array with the urls that\nyou can use in your templates to provision styles.\n\nModules as `cssflickr@hermes` denotate a module from a particular group,\nas in `<module-name>@<group-name>`. Modules without the group denotation\nwill be assumed as core modules from yui.",
            "itemtype": "method",
            "name": "buildCSSUrls",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "modules",
                    "description": "One or more module name (and optional @<group-name>)",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "the `href` url for each link tag to be inserted in the header of the page",
                "type": "Array"
            },
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/seed.js",
            "line": 230,
            "description": "Build a list of urls for a list of modules. Modules are described as `<module-name>@<group-name>`.\nModules without the group denotation will be assumed as core modules from yui. `ext` denotates\nthe type of the modules since this routine is able to produce css or js modules alike.",
            "itemtype": "method",
            "name": "_buildUrls",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "modules",
                    "description": "the array of modules to generate the urls.",
                    "type": "Array"
                },
                {
                    "name": "ext",
                    "description": "the modules extension, `js` or `css`.",
                    "type": "String"
                },
                {
                    "name": "filterMap",
                    "description": "hash table to translate filter values into suffix for modules.\n                          e.g.: `min` -> `-min`",
                    "type": "Object"
                },
                {
                    "name": "customConfig",
                    "description": "optional configuration to overrule filter and combine per request when\n                building the urls",
                    "type": "Object",
                    "props": [
                        {
                            "name": "filter",
                            "description": "optional filter to overrule any filter",
                            "type": "String"
                        },
                        {
                            "name": "combine",
                            "description": "optional flag to overrule combine,\n                     when set to `false`, it will avoid creating combo urls.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "the `href` url for each link tag to be inserted in the header of the page",
                "type": "Array"
            },
            "class": "seed",
            "module": "express-yui/lib/seed"
        },
        {
            "file": "lib/server.js",
            "line": 32,
            "description": "Create a synthetic group off the bundle renference to register its modules\ninto the server and/or client Y instance so they can be used thru `app.yui.use()`.",
            "itemtype": "method",
            "name": "registerBundle",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "bundle",
                    "description": "A locator bundle reference.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "server",
            "module": "express-yui/lib/server"
        },
        {
            "file": "lib/server.js",
            "line": 101,
            "description": "Waits for the app to be ready, including the YUI instance to notify back that the\n`ready` state of the app was reached by calling the `callback`. The ready state is\nbound to the locator instance mounted into the express app thru `app.set('locator', locator);`\nand depending on `app.get('locator').ready.then()` promise result, the ready state\nwill be reached or not.\n\n    app.yui.ready(function (err) {\n        if (err) {\n            throw err;\n        }\n        // do something!\n    });",
            "itemtype": "method",
            "name": "ready",
            "params": [
                {
                    "name": "callback",
                    "description": "when the app is ready. If an error occurr, the error object\n                    will be passed as the first argument of the callback function.",
                    "type": "Function"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "server",
            "module": "express-yui/lib/server"
        },
        {
            "file": "lib/server.js",
            "line": 148,
            "description": "Creates a YUI Instance, and wraps the call to `Y.require()` to work appropiatly on\nthe server side. The `require` method can be called once the `ready` state is achieved\nthru `app.yui.ready()`.\n\n    app.yui.ready(function (err) {\n        if (err) {\n            throw err;\n        }\n        app.yui.require('json-stringify', function (Y, imports) {\n            Y.JSON.stringify({ entry: 'value' });\n        });\n    });",
            "itemtype": "method",
            "name": "require",
            "access": "public",
            "tagname": "",
            "class": "server",
            "module": "express-yui/lib/server"
        },
        {
            "file": "lib/server.js",
            "line": 235,
            "description": "Creates a YUI Instance, and wraps the call to `Y.use()` to work appropiatly on\nthe server side. The `use` method can be called once the `ready` state is achieved\nthru `app.yui.ready()`.\n\n    app.yui.ready(function (err) {\n        if (err) {\n            throw err;\n        }\n        app.yui.use('json-stringify', function (Y) {\n            Y.JSON.stringify({ entry: 'value' });\n        });\n    });",
            "itemtype": "method",
            "name": "use",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "Y instance",
                "type": "Object"
            },
            "class": "server",
            "module": "express-yui/lib/server"
        },
        {
            "file": "lib/utils.js",
            "line": 27,
            "description": "Extends object with properties from other objects.\n\n    var a = { foo: 'bar' }\n      , b = { bar: 'baz' }\n      , c = { baz: 'xyz' };\n\n    utils.extends(a, b, c);\n    // a => { foo: 'bar', bar: 'baz', baz: 'xyz' }",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "the receiver object to be extended",
                    "type": "Object"
                },
                {
                    "name": "supplier",
                    "description": "objects",
                    "type": "Object*"
                }
            ],
            "return": {
                "description": "The extended object",
                "type": "Object"
            },
            "class": "utils",
            "module": "express-yui/lib/utils"
        },
        {
            "file": "lib/utils.js",
            "line": 59,
            "description": "Deep clone of an object.",
            "itemtype": "method",
            "name": "clone",
            "static": 1,
            "params": [
                {
                    "name": "oldObj",
                    "description": "the origal object to be cloned",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The cloned object",
                "type": "Object"
            },
            "class": "utils",
            "module": "express-yui/lib/utils"
        },
        {
            "file": "lib/utils.js",
            "line": 94,
            "description": "Minify the body of a function by removing spaces, tabs, comments, breaklines, etc.\nThis is specially useful to optimize the function before serializing it to send\nit to the client side as a js blob.",
            "itemtype": "method",
            "name": "minifyFunction",
            "static": 1,
            "params": [
                {
                    "name": "fn",
                    "description": "the function to minify",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the minified function",
                "type": "Function"
            },
            "class": "utils",
            "module": "express-yui/lib/utils"
        },
        {
            "file": "lib/utils.js",
            "line": 120,
            "description": "Utility method to use the loader base and add the folder name that represents\na group to complete the new base and root value for each custom group.\n\n    utils.joinURLFolder('http://foo.com/bar', 'baz');  // => http://foo.com/bar/baz/\n    utils.joinURLFolder('https://foo.com/bar', 'baz'); // => https://foo.com/bar/baz/\n    utils.joinURLFolder('//foo.com/bar/', 'baz');      // => //foo.com/bar/baz/\n    utils.joinURLFolder('/bar', 'baz');                // => /bar/baz/",
            "itemtype": "method",
            "name": "joinURLFolder",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "the url that should get the new segment added at the end",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the new url",
                "type": "String"
            },
            "class": "utils",
            "module": "express-yui/lib/utils"
        },
        {
            "file": "lib/utils.js",
            "line": 139,
            "description": "The default combo handler configuration for app origin.",
            "itemtype": "property",
            "name": "DEFAULT_COMBO_CONFIG",
            "static": 1,
            "type": "{Object}",
            "class": "utils",
            "module": "express-yui/lib/utils"
        },
        {
            "file": "lib/utils.js",
            "line": 152,
            "description": "Whether the app is running in debug mode or not. True if nodejs is running\nin development mode.",
            "itemtype": "property",
            "name": "debugMode",
            "static": 1,
            "type": "{Boolean}",
            "class": "utils",
            "module": "express-yui/lib/utils"
        },
        {
            "file": "lib/yui.js",
            "line": 115,
            "description": "Extends the static configuration with the supplier\nobject(s). You can use it like this:\n\n    // Disable CSS computations\n    app.yui.applyConfig({\n        fetchCSS: false\n    });",
            "itemtype": "method",
            "name": "applyConfig",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "supplier",
                    "description": "objects to be mixed with the\nstatic configuration. All available settings\n[from the YUI API Docs](http://yuilibrary.com/yui/docs/api/classes/config.html).\ncan be used here.",
                    "type": "Object*"
                }
            ],
            "chainable": 1,
            "class": "yui",
            "module": "express-yui/lib/yui"
        },
        {
            "file": "lib/yui.js",
            "line": 137,
            "description": "Extends the static configuration with the supplier object(s)\nor returns the current static configuration reference. This\nconfiguration is static, and attached to the server object.\nOnce you call `yui.expose()` middleware for the first time,\nthis configuration becomes inmutable.",
            "itemtype": "method",
            "name": "config",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "supplier",
                    "description": "Optional supplier objects\nthat, if passed, will be mix with the static configuration.",
                    "type": "Object*"
                }
            ],
            "return": {
                "description": "static configuration",
                "type": "Object"
            },
            "class": "yui",
            "module": "express-yui/lib/yui"
        },
        {
            "file": "lib/yui.js",
            "line": 163,
            "description": "Set up a default group in loader that represents the\ncore yui modules to be loaded from YUI CDN.\n\n    app.yui.setCoreFromCDN();",
            "itemtype": "method",
            "name": "setCoreFromCDN",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "loaderConfig",
                    "description": "Optional loader configuration\nobjects that, if passed, will be mix with the default\nconfiguration for yui CDN.",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "yui",
            "module": "express-yui/lib/yui"
        }
    ],
    "warnings": []
}